import base64
import io
import logging
from openai import AsyncOpenAI
from config import OPENAI_API_KEY

# üéØ OpenAI Client
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# üé® 1. Meme caption generatsiya qilish
async def generate_meme_caption(prompt: str, lang: str) -> str:
    system_prompts = {
        "en": (
            "You are a professional meme expert. "
            "Generate a short, witty, and funny meme caption based on the user's input. "
            "The caption should feel modern, natural, and shareable."
        ),
        "uz": (
            "Siz professional mem mutaxassisisiz. "
            "Foydalanuvchi yuborgan matn asosida qisqa, kulgili va zamonaviy mem matnini yarating. "
            "Natija tabiiy va tarqalishga yaroqli bo‚Äòlishi kerak."
        ),
        "ru": (
            "–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ–º–∞–º. "
            "–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∏ —Å–º–µ—à–Ω–æ–π —Ç–µ–∫—Å—Ç –º–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º—ã–º."
        )
    }
    system_prompt = system_prompts.get(lang, system_prompts["en"])

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logging.error(f"‚ùå Error generating meme caption: {e}")
        return prompt

# üñº 2. DALL¬∑E orqali rasm generatsiya qilish
async def generate_meme_image(prompt: str, lang: str) -> bytes:
    try:
        response = await client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            response_format="b64_json",
            n=1
        )
        image_data = response.data[0].b64_json
        image_bytes = base64.b64decode(image_data)
        return io.BytesIO(image_bytes)

    except Exception as e:
        logging.error(f"‚ùå Error generating meme image: {e}")
        raise

# ü§ñ 3. Remix uchun kulgili xabar generatsiya qilish
async def generate_remix_message(prompt: str, lang: str) -> str:
    system_prompts = {
        "en": (
            "You are a humorous, meme-savvy AI assistant. "
            "When asked for a remix, reply with a short, witty, and funny comment. "
            "Use emojis if needed. Make it natural, playful, and modern."
        ),
        "uz": (
            "Siz hazilkash va mem madaniyatidan yaxshi xabardor sun'iy intellektsiyasiz. "
            "Remix so‚Äòralganda, qisqa va kulgili tarzda javob bering. "
            "Emoji ishlatishingiz mumkin. Javob zamonaviy va hazil ohangida bo‚Äòlishi kerak."
        ),
        "ru": (
            "–í—ã –≤–µ—Å—ë–ª—ã–π –∏ —Ä–∞–∑–±–∏—Ä–∞—é—â–∏–π—Å—è –≤ –º–µ–º–∞—Ö –ò–ò. "
            "–ö–æ–≥–¥–∞ –ø—Ä–æ—Å—è—Ç —Ä–µ–º–∏–∫—Å, –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, –æ—Å—Ç—Ä–æ—É–º–Ω–æ –∏ —Å–º–µ—à–Ω–æ. "
            "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∏–≥—Ä–∏–≤—ã–º."
        )
    }
    system_prompt = system_prompts.get(lang, system_prompts["en"])

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Prompt: {prompt}\n\nPlease reply with a funny remix comment."}
            ],
            temperature=0.9
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logging.error(f"‚ùå Error generating remix message: {e}")
        return "üîÑ Remix ready! üéâ"

# ‚ú® 4. Caption + Tasvirdan DALL¬∑E uchun yuqori sifatli prompt yaratish
async def generate_image_prompt(caption: str, description: str, lang: str = "en") -> str:
    system_prompts = {
        "en": (
            "You are an AI assistant that combines a meme caption and an image description "
            "to create a high-quality English prompt for DALL¬∑E. "
            "The prompt must be clear, vivid, and creative."
        ),
        "uz": (
            "Siz mem matni va rasm tasvirini birlashtirib, DALL¬∑E uchun sifatli inglizcha prompt yaratadigan AI yordamchisisiz. "
            "Prompt aniq, tasavvurga boy va ijodiy bo‚Äòlishi kerak."
        ),
        "ru": (
            "–í—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, "
            "—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è DALL¬∑E. "
            "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º, —è—Ä–∫–∏–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º."
        )
    }
    system_prompt = system_prompts.get(lang, system_prompts["en"])

    try:
        user_input = f"Meme Caption: {caption}\nImage Description: {description}"

        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ],
            temperature=0.8
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logging.error(f"‚ùå Error generating image prompt: {e}")
        return f"{caption} with {description}"
